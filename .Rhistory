matriz_mu <= matrix(NA, nrow = 45, ncol = 95)
# Crear una matriz de 45 filas y 95 columnas, inicializada con NA
matriz_ho <- matrix(NA, nrow = 45, ncol = 95)
matriz_mu <= matrix(NA, nrow = 45, ncol = 95)
# Crear una matriz de 45 filas y 95 columnas, inicializada con NA
matriz_ho <- matrix(NA, nrow = 45, ncol = 95)
matriz_mu <- matrix(NA, nrow = 45, ncol = 95)
# Llnar matriz hombres
for (i in 1:45) {
matriz_ho[i,i] <- tabla_hombres[20 + i,26 + i]
}
# Crear una matriz de 45 filas y 95 columnas, inicializada con NA
matriz_ho <- matrix(NA, nrow = 45, ncol = 95)
matriz_mu <- matrix(NA, nrow = 45, ncol = 95)
# Llnar matriz hombres
for (i in 1:45) {
for (j in 1:95) {
}
matriz_ho[i,j] <- tabla_hombres[20 + j, 26 + j]
}
# Crear una matriz de 45 filas y 95 columnas, inicializada con NA
matriz_ho <- matrix(NA, nrow = 45, ncol = 95)
matriz_mu <- matrix(NA, nrow = 45, ncol = 95)
# Llenar matriz hombres
for (i in 1:45) {
for (j in 1:95) {
matriz_ho[i, j] <- tabla_hombres[20 + i, 26 + j]
}
}
# Crear una matriz de 45 filas y 95 columnas, inicializada con NA
matriz_ho <- matrix(NA, nrow = 45, ncol = 95)
matriz_mu <- matrix(NA, nrow = 45, ncol = 95)
# Llenar matriz hombres
for (i in 1:45) {
for (j in 1:95) {
matriz_ho[i, j] <- tabla_hombres[20 + j, 26 + j]
}
}
# Crear una matriz de 45 filas y 95 columnas, inicializada con NA
matriz_ho <- matrix(NA, nrow = 45, ncol = 95)
matriz_mu <- matrix(NA, nrow = 45, ncol = 95)
# Llenar matriz hombres
for (i in 1:45) {
for (j in 1:95) {
matriz_ho[i, j] <- tabla_hombres[20 + j, 26 + j]
}
}
# Crear una matriz de 45 filas y 95 columnas, inicializada con NA
matriz_ho <- matrix(NA, nrow = 45, ncol = 95)
matriz_mu <- matrix(NA, nrow = 45, ncol = 95)
# Llenar matriz hombres
for (i in 1:45) {
for (j in 1:95) {
matriz_ho[i, j] <- tabla_hombres[20 + j, 26 + j]
}
}
# Crear una matriz de 45 filas y 95 columnas, inicializada con NA
matriz_ho <- matrix(NA, nrow = 45, ncol = 95)
matriz_mu <- matrix(NA, nrow = 45, ncol = 95)
# Llenar matriz hombres
for (i in 1:45) {
for (j in 1:95) {
matriz_ho[i, j] <- tabla_hombres[20 + j, 26 + j]
}
}
# Crear una matriz de 45 filas y 95 columnas, inicializada con NA
matriz_ho <- matrix(NA, nrow = 45, ncol = 95)
matriz_mu <- matrix(NA, nrow = 45, ncol = 95)
# Llenar matriz hombres
for (i in 1:45) {
for (j in 1:95) {
matriz_ho[i, j] <- tabla_hombres[20 + j, 26 + j]
}
}
# Crear una matriz de 45 filas y 95 columnas, inicializada con NA
matriz_ho <- matrix(NA, nrow = 45, ncol = 95)
matriz_mu <- matrix(NA, nrow = 45, ncol = 95)
# Suponiendo que tabla_hombres tiene al menos 65 filas y 121 columnas
n_filas <- 45
n_columnas <- 95
# Verificar dimensiones de tabla_hombres
dimensiones <- dim(tabla_hombres)
n_filas_tabla <- dimensiones[1]
n_columnas_tabla <- dimensiones[2]
# Llenar matriz hombres, asegurando que no excedemos las dimensiones de tabla_hombres
for (i in 1:n_filas) {
for (j in 1:n_columnas) {
fila_tabla <- 20 + i
columna_tabla <- 26 + j
if (fila_tabla <= n_filas_tabla && columna_tabla <= n_columnas_tabla) {
matriz_ho[i, j] <- tabla_hombres[fila_tabla, columna_tabla]
}
}
}
print(tabla_hombres[20 + 45, 26 + 95])
print(tabla_hombres[20 + 95, 26 + 95])
print(tabla_hombres[20 + 95, 26 + 95])
print(tabla_hombres[20 + 96, 26 + 95])
# Crear una matriz de 45 filas y 95 columnas, inicializada con NA
matriz_ho <- matrix(NA, nrow = 45, ncol = 95)
matriz_mu <- matrix(NA, nrow = 45, ncol = 95)
# Llenar matriz hombres
for (i in 1:3) {
for (j in 1:3) {
matriz_ho[i, j] <- tabla_hombres[20 + j, 26 + j]
}
}
# Crear una matriz vacía
matriz <- matrix(NA, nrow = 45, ncol = 95)
# Llenar la matriz con la fórmula i + j
for (i in 1:45) {
for (j in 1:95) {
matriz[i, j] <- i + j
}
}
# Crear una matriz vacía
matriz <- matrix(NA, nrow = 45, ncol = 95)
# Llenar la matriz con la fórmula i + j
for (i in 1:45) {
for (j in 1:95) {
matriz[i, j] <- i + j
}
}
print(matriz)
# Crear una matriz vacía
matriz <- matrix(NA, nrow = 4, ncol = 4)
# Llenar la matriz con la fórmula i + j
for (i in 1:4) {
for (j in 1:4) {
matriz[i, j] <- i + j
}
}
print(matriz)
print(tabla_hombres[20 + 96, 26 + 95])
print(tabla_hombres[20 + 96, 26 + 96])
print(tabla_hombres[116,115])
print(tabla_hombres[116+1,115+1])
print(tabla_hombres[116,115+1])
print(tabla_hombres[116,115+2])
print(tabla_hombres[1,0+2])
#print(tabla_hombres[1+edad,año+2])
tabla_hombres[20 + 95, 26 + 95]
# Crear una matriz de 45 filas y 95 columnas, inicializada con NA
matriz_ho <- matrix(NA, nrow = 45, ncol = 96)
matriz_mu <- matrix(NA, nrow = 45, ncol = 95)
# Llenar matriz hombres
for (i in 1:3) {
for (j in 1:95) {
matriz_ho[i, j] <- tabla_hombres[(20+1) + j, 26 + j]
}
}
#print(tabla_hombres[1+edad,año+2])
tabla_hombres[20 +1 + 95, 26 + 95]
# Crear una matriz de 45 filas y 95 columnas, inicializada con NA
matriz_ho <- matrix(NA, nrow = 45, ncol = 96)
matriz_mu <- matrix(NA, nrow = 45, ncol = 95)
# Llenar matriz hombres
for (i in 1:3) {
for (j in 1:95) {
matriz_ho[i, j] <- as.numeric(tabla_hombres[(20+1) + j, 26 + j])
}
}
print(matriz_ho)
# Crear una matriz de 45 filas y 95 columnas, inicializada con NA
matriz_ho <- matrix(NA, nrow = 45, ncol = 96)
matriz_mu <- matrix(NA, nrow = 45, ncol = 96)
# Llenar matriz hombres
for (i in 1:45) {
for (j in 1:96) {
matriz_ho[i, j] <- as.numeric(tabla_hombres[(20+1) + j, 26 + j])
}
}
print(matriz_ho)
# Crear una matriz de 45 filas y 95 columnas, inicializada con NA
matriz_ho <- matrix(NA, nrow = 45, ncol = 96)
matriz_mu <- matrix(NA, nrow = 45, ncol = 96)
# Llenar matriz hombres
for (i in 1:45) {
for (j in 1:96) {
matriz_ho[i, j] <- as.numeric(tabla_hombres[(20+1+i) + j, 26 + j])
}
}
print(matriz_ho)
# Crear una matriz de 45 filas y 95 columnas, inicializada con NA
matriz_ho <- matrix(NA, nrow = 45, ncol = 96)
matriz_mu <- matrix(NA, nrow = 45, ncol = 96)
# Llenar matriz hombres
for (i in 1:45) {
for (j in 1:96) {
matriz_ho[i, j] <- as.numeric(tabla_hombres[(19+i) + j, 25 + j])
}
}
print(matriz_ho)
# Crear una matriz de 45 filas y 96 columnas, inicializada con NA
matriz_ho <- matrix(NA, nrow = 45, ncol = 96)
matriz_mu <- matrix(NA, nrow = 45, ncol = 96)
# Llenar matriz hombres
for (i in 1:45) {
for (j in 1:96) {
valor <- as.numeric(tabla_hombres[(19+i) + j, 25 + j])
matriz_ho[i, j] <- ifelse(is.na(valor), 1, valor)
}
}
print(matriz_ho)
# Crear una matriz de 45 filas y 96 columnas, inicializada con NA
matriz_ho <- matrix(NA, nrow = 45, ncol = 96)
matriz_mu <- matrix(NA, nrow = 45, ncol = 96)
# Llenar matriz hombres
for (i in 1:45) {
for (j in 1:96) {
valor <- as.numeric(tabla_hombres[(19+i) + j, 25 + j])
matriz_ho[i, j] <- ifelse(is.na(valor), as.numeric(1), valor)
}
}
print(matriz_ho)
# Crear una matriz de 45 filas y 96 columnas, inicializada con NA
matriz_ho <- matrix(NA, nrow = 45, ncol = 96)
matriz_mu <- matrix(NA, nrow = 45, ncol = 96)
# Llenar matriz hombres
for (i in 1:45) {
for (j in 1:96) {
valor <- as.numeric(tabla_hombres[(19+i) + j, 25 + j])
matriz_ho[i, j] <- ifelse(is.na(valor), 1, valor)
}
}
print(matriz_ho)
View(tabla_mujeres)
# Crear una matriz de 45 filas y 96 columnas, inicializada con NA
matriz_ho <- matrix(NA, nrow = 45, ncol = 96)
matriz_mu <- matrix(NA, nrow = 45, ncol = 96)
# Llenar matriz hombres
for (i in 1:45) {
for (j in 1:96) {
valor <- as.numeric(tabla_hombres[(19+i) + j, 25 + j])
matriz_ho[i, j] <- ifelse(is.na(valor), 1, valor)
}
}
# Llenar matriz mujeres
for (i in 1:45) {
for (j in 1:96) {
valor <- as.numeric(tabla_mujeres[(19+i) + j, 25 + j])
matriz_mu[i, j] <- ifelse(is.na(valor), 1, valor)
}
}
print(matriz_mu)
# Función para calcular las probabilidades de mortalidad (qx) agrupadas por edad y sexo
calcular_probabilidades <- function(observaciones, probabilidades) {
lista_probabilidades <- list()
for (i in seq_len(nrow(observaciones))) {
edad_actual <- observaciones$Edad[i]
sexo_actual <- observaciones$Sexo[i]
año_actual <- 2023
probabilidades_filtradas <- probabilidades[probabilidades$sex == sexo_actual,]
qx_temp <- list()
while (any(probabilidades_filtradas$edad == edad_actual & probabilidades_filtradas$year == año_actual)) {
qx_valor <- probabilidades_filtradas[probabilidades_filtradas$edad == edad_actual & probabilidades_filtradas$year == año_actual, ]$qx
qx_temp <- append(qx_temp, 1 - qx_valor)
edad_actual <- edad_actual + 1
año_actual <- año_actual + 1
}
lista_probabilidades[[i]] <- list(qx = qx_temp, sexo = sexo_actual, edad_inicio = observaciones$Edad[i])
}
return(lista_probabilidades)
}
t <- proc.time()
qx <- calcular_probabilidades(datos_df, datos_mortalidad_numerico)
#La población de pensionados vivos comienza en cero, ya que es el año inicial de la proyección y no se
#han aplicado las probabilidades de mortalidad para calcular el número de personas que estarán vivas en
#este año.
#Cuantía del beneficio de vejez:
#El monto de la pensión a otorgar corresponde a un monto inicial de CRC300 mil colones mensuales más
#aguinaldo. El monto inicial se incrementa anualmente con inflación.
#Además, las pensiones se revalorizan anualmente con base en la inflación observada en el último año.
#Beneficio en caso de muerte del empleado activo:
#En caso de muerte del empleado activo se paga un beneficio de CRC5 millones salarios al final del año
#de la muerte. El monto inicial de beneficio se incrementa anualmente con inflación.
#Beneficio en caso de muerte del pensionado:
#En caso de muerte del pensionado se paga un beneficio inicial de CRC1 millón,
#el cual aumenta anualmente con la inflación.
calcular_primas_niveladas <- function(qx) {
df <- data.frame(edad = numeric(0), sexo = numeric(0), vp = numeric(0), anualidad = numeric(0), prima = numeric(0)) #para almacenar
for (i in 1:length(qx)) {
x <- qx[[i]]
vp_pen <- 0 #almacenar vp
px_acum <- 1
for (j in 1:length(x$qx)) {
qx_val <- as.numeric(x$qx[j])
if (j + x$edad_inicio <= 65) {
#Se comprueba si la edad actual más j es menor o igual a 65 años.
vp_pen <- vp_pen + px_acum * (1 - qx_val) * 5000000 * (1.03 / 1.07)^(j - 1) #considera inflacion
} else {
interes <- 1.07^(1 / 12) - 1
VP_ann <- 300000 * (1 - (1 / 1.07)) / interes
VP_agui <- 150000 * (1 - (1 / 1.07)) / (1.07^(1 / 2) - 1)
VP <- VP_ann + VP_agui
#caso de muerte del pensionado se paga un beneficio inicial de CRC1 millón, el cual aumenta anualmente con la inflación
#dependiendo de si esta vivo o muesto
vp_pen <- vp_pen + px_acum * (1 - qx_val) * 1000000 * (1.03 / 1.07)^(j - 1)
vp_pen <- vp_pen + px_acum * qx_val * VP * (1.03 / 1.07)^(j - 1)
}
px_acum <- px_acum * qx_val
}
annuity <- (1 - (1.03 / 1.07)^(65 - x$edad_inicio)) / (((1.07 / 1.03) - 1) * (1.03 / 1.07)) #anualidad prima nivelada
df <- rbind(df, data.frame(edad = x$edad_inicio, sexo = x$sexo, vp = vp_pen, anualidad = annuity, prima = vp_pen / annuity))
}
return(df)
}
# Crear una matriz de 45 filas y 96 columnas, inicializada con NA
matriz_ho <- matrix(NA, nrow = 45, ncol = 96)
matriz_mu <- matrix(NA, nrow = 45, ncol = 96)
# Llenar matriz hombres
for (i in 1:45) {
for (j in 1:96) {
valor <- as.numeric(tabla_hombres[(19+i) + j, 25 + j])
matriz_ho[i, j] <- ifelse(is.na(valor), 1, valor)
}
}
# Llenar matriz mujeres
for (i in 1:45) {
for (j in 1:96) {
valor <- as.numeric(tabla_mujeres[(19+i) + j, 25 + j])
matriz_mu[i, j] <- ifelse(is.na(valor), 1, valor)
}
}
print(matriz_mu)
# Obtener base de datos
base_datos <- read_excel("Base de datos.xlsx")
# Obtener base de datos
base_datos <- read_excel("Base de datos.xlsx")
# Librerías necesarias
library(readxl)
library(dplyr)
library(lubridate)
library(tidyr)
library(readr)
# Obtener base de datos
base_datos <- read_excel("Base de datos.xlsx")
tabla_hombres <- read_excel("MortalidadesSupen.xlsx",
sheet = "Hombre", range = "A6:EW122")
tabla_mujeres <- read_excel("MortalidadesSupen.xlsx",
sheet = "Mujer", range = "A5:EW121")
View(tabla_hombres)
# Función proyección empleados ativos
# df: base de datos
# tm: tabla de mortalidad
# sexo: F (mujeres) o M (hombres)
# periodo: año en el que inicia la proyección
proyeccion_activos <- function(df, tm, sexo, periodo) {
if (sexo == "M") {
df_empleados <- df
df_probas_muerte <- tm
} else if (sexo == "F") {
df_empleados <- df
df_probas_muerte <- tm
} else {
return("Por favor ingresar 'M' para hombres y 'F' para mujeres")
}
# Edad mínima en la base de datos
edad_min <- min(df_empleados$Edad)
# Edad máxima en la base de datos
edad_max <- max(df_empleados$Edad)
# Años para que la última persona se pensiones
periodo_total <- 65-edad_min
# Diferentes edades en la base de datos
edades <- edad_max - edad_min
# Crear un data frame lleno de ceros con las diferentes edades (filas) y los años (columnas)
df_activos <- data.frame(matrix(0, ncol = periodo_total+1, nrow = edades+2))
colnames(df_activos) <- as.character((periodo-1):(periodo+periodo_total-1)) # Asignar nombres a las columnas (años)
rownames(df_activos) <- as.character((edad_min-1):64) # Asignar nombres a las filas (edades)
for (fila in 1:nrow(df_empleados)) {
edad_actual <- df_empleados$Edad[fila]
vivos <- df_empleados$Numero_de_empleados[fila]
for (i in 0:periodo_total) {
año_proyeccion <- periodo + i
if (edad_actual + i < 65) {  # Considerar solo hasta que se jubilen (65 años)
fila_mortalidad <- edad_actual + i
col_mortalidad <- as.character(año_proyeccion)
# Verificación de índices
if (fila_mortalidad < nrow(df_probas_muerte) && col_mortalidad %in% colnames(df_probas_muerte)) {
# Asegurando que solo se accede a un valor numérico
proba_muerte <- as.numeric(df_probas_muerte[fila_mortalidad + 1, col_mortalidad])
df_activos[as.character(fila_mortalidad), as.character(año_proyeccion)] <- vivos * (1 - proba_muerte)
# Actualizar cantidades
vivos <- vivos * (1 - proba_muerte)
}
} else if (edad_actual + i == 65){ # contar cuando el año que se jubilan para el cálculo de otras proyecciones demográficas
fila_mortalidad <- edad_actual + i
col_mortalidad <- as.character(año_proyeccion)
# Verificación de índices
if (fila_mortalidad < nrow(df_probas_muerte) && col_mortalidad %in% colnames(df_probas_muerte)) {
# Asegurando que solo se accede a un valor numérico
proba_muerte <- as.numeric(df_probas_muerte[fila_mortalidad + 1, col_mortalidad])
df_activos[as.character(fila_mortalidad), as.character(año_proyeccion)] <- vivos * (1 - proba_muerte)
# Actualizar cantidades
vivos <- vivos * (1 - proba_muerte)
}
}
}
}
# Agragar columna con la cantidad de empleados activos en el momento 0
df_temp <- as.data.frame(df$Numero_de_empleados)
colnames(df_temp) <- as.character(periodo-1)
df_ceros <- data.frame(matrix(0, ncol = 1, nrow = 2))
colnames(df_ceros) <- as.character(periodo-1)
df_temp <- rbind(df_temp, df_ceros)
df_activos[,1] <- df_temp
df_activos[is.na(df_activos)] <- 0
return(df_activos)
}
# Ver el resultado para hombres y mujeres
result_hombres_activos <- proyeccion_activos(empleados_edad_ho, tabla_hombres, 'M', 2024)
# Ver el resultado para hombres y mujeres
result_hombres_activos <- proyeccion_activos(empleados_edad_ho, tabla_hombres, 'M', 2024)
# Librerías necesarias
library(readxl)
library(dplyr)
library(lubridate)
library(tidyr)
library(readr)
# Obtener base de datos
base_datos <- read_excel("Base de datos.xlsx")
tabla_hombres <- read_excel("MortalidadesSupen.xlsx",
sheet = "Hombre", range = "A6:EW122")
tabla_mujeres <- read_excel("MortalidadesSupen.xlsx",
sheet = "Mujer", range = "A5:EW121")
View(tabla_hombres)
# Fecha en columna
base_datos$`Fecha de nacimiento` <- as.Date(base_datos$`Fecha de nacimiento`)
# Fecha
fecha_corte <- as.Date("2023-12-31")
# Calcular la edad
base_datos$Edad <- floor(interval(base_datos$`Fecha de nacimiento`, fecha_corte) / years(1))
# Filtrar por sexo
df_empleados_ho <- base_datos %>% filter(Sexo == "M")
df_empleados_mu <- base_datos %>% filter(Sexo == "F")
# Agrupar por edad y contar numero en cada edad
empleados_edad_ho <- df_empleados_ho %>% group_by(Edad) %>% summarise(Numero_de_empleados = n())
empleados_edad_mu <- df_empleados_mu %>% group_by(Edad) %>% summarise(Numero_de_empleados = n())
print(empleados_edad_ho)
print(empleados_edad_mu)
# Función proyección empleados ativos
# df: base de datos
# tm: tabla de mortalidad
# sexo: F (mujeres) o M (hombres)
# periodo: año en el que inicia la proyección
proyeccion_activos <- function(df, tm, sexo, periodo) {
if (sexo == "M") {
df_empleados <- df
df_probas_muerte <- tm
} else if (sexo == "F") {
df_empleados <- df
df_probas_muerte <- tm
} else {
return("Por favor ingresar 'M' para hombres y 'F' para mujeres")
}
# Edad mínima en la base de datos
edad_min <- min(df_empleados$Edad)
# Edad máxima en la base de datos
edad_max <- max(df_empleados$Edad)
# Años para que la última persona se pensiones
periodo_total <- 65-edad_min
# Diferentes edades en la base de datos
edades <- edad_max - edad_min
# Crear un data frame lleno de ceros con las diferentes edades (filas) y los años (columnas)
df_activos <- data.frame(matrix(0, ncol = periodo_total+1, nrow = edades+2))
colnames(df_activos) <- as.character((periodo-1):(periodo+periodo_total-1)) # Asignar nombres a las columnas (años)
rownames(df_activos) <- as.character((edad_min-1):64) # Asignar nombres a las filas (edades)
for (fila in 1:nrow(df_empleados)) {
edad_actual <- df_empleados$Edad[fila]
vivos <- df_empleados$Numero_de_empleados[fila]
for (i in 0:periodo_total) {
año_proyeccion <- periodo + i
if (edad_actual + i < 65) {  # Considerar solo hasta que se jubilen (65 años)
fila_mortalidad <- edad_actual + i
col_mortalidad <- as.character(año_proyeccion)
# Verificación de índices
if (fila_mortalidad < nrow(df_probas_muerte) && col_mortalidad %in% colnames(df_probas_muerte)) {
# Asegurando que solo se accede a un valor numérico
proba_muerte <- as.numeric(df_probas_muerte[fila_mortalidad + 1, col_mortalidad])
df_activos[as.character(fila_mortalidad), as.character(año_proyeccion)] <- vivos * (1 - proba_muerte)
# Actualizar cantidades
vivos <- vivos * (1 - proba_muerte)
}
} else if (edad_actual + i == 65){ # contar cuando el año que se jubilan para el cálculo de otras proyecciones demográficas
fila_mortalidad <- edad_actual + i
col_mortalidad <- as.character(año_proyeccion)
# Verificación de índices
if (fila_mortalidad < nrow(df_probas_muerte) && col_mortalidad %in% colnames(df_probas_muerte)) {
# Asegurando que solo se accede a un valor numérico
proba_muerte <- as.numeric(df_probas_muerte[fila_mortalidad + 1, col_mortalidad])
df_activos[as.character(fila_mortalidad), as.character(año_proyeccion)] <- vivos * (1 - proba_muerte)
# Actualizar cantidades
vivos <- vivos * (1 - proba_muerte)
}
}
}
}
# Agragar columna con la cantidad de empleados activos en el momento 0
df_temp <- as.data.frame(df$Numero_de_empleados)
colnames(df_temp) <- as.character(periodo-1)
df_ceros <- data.frame(matrix(0, ncol = 1, nrow = 2))
colnames(df_ceros) <- as.character(periodo-1)
df_temp <- rbind(df_temp, df_ceros)
df_activos[,1] <- df_temp
df_activos[is.na(df_activos)] <- 0
return(df_activos)
}
# Ver el resultado para hombres y mujeres
result_hombres_activos <- proyeccion_activos(empleados_edad_ho, tabla_hombres, 'M', 2024)
result_mujeres_activos <- proyeccion_activos(empleados_edad_mu, tabla_mujeres, 'F', 2024)
print(result_hombres_activos)
print(result_mujeres_activos)
