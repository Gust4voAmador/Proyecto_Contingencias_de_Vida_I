edad_inicio <- edad_actual
for (año in año_inicio:2118) {
if (edad_inicio <= 115) {
#obtener las probas de muertes
proba_muerte <- df_probas_muerte[edad_inicio - 65 + 1, año - 2000 + 1]
df_pensionados[as.character(edad_inicio), as.character(año)] <- vivos
vivos <- vivos * (1 - proba_muerte)
edad_inicio <- edad_inicio + 1
} else {
break
}
}
}
}
print(df_pensionados)
vector_suma <- colSums(df_pensionados)
vector_suma <- as.vector(vector_suma)[-length(as.vector(vector_suma))]
vector_años <- 65:115
print(vector_años)
df_proyeccion <- cbind(data.frame(Años = vector_años), df_pensionados)
return(df_proyeccion)
}
print(proyeccion_pensionados('M'))
# función proyección
proyeccion_pensionados <- function(sexo) {
# Definir las tablas según el sexo ingresado
if (sexo == "M") {
df_empleados <- df_sobrev_ho
df_probas_muerte <- tabla_hombres
} else if (sexo == "F") {
df_empleados <- df_sobrev_mu
df_probas_muerte <- tabla_mujeres
} else {
return("Por favor ingresar 'M' para hombres y 'F' para mujeres")
}
# Crear un data frame lleno de ceros con 95 columnas y 51 filas
df_pensionados <- data.frame(matrix(0, ncol = 95, nrow = 51))
colnames(df_pensionados) <- as.character(2024:2118) # Asignar nombres a las columnas
rownames(df_pensionados) <- as.character(65:115) # Asignar nombres a las filas
# Procesar cada fila de empleados
for (fila in 1:nrow(df_empleados)) {
edad_actual <- df_empleados[fila, 1]
vivos <- df_empleados[fila, 2]
if (edad_actual >= 65) {
año_inicio <- 2024
edad_inicio <- edad_actual
for (año in año_inicio:2118) {
if (edad_inicio <= 115) {
#obtener las probas de muertes
proba_muerte <- df_probas_muerte[edad_inicio - 65 + 1, año - 2000 + 1]
df_pensionados[as.character(edad_inicio), as.character(año)] <- vivos
vivos <- vivos * (1 - proba_muerte)
edad_inicio <- edad_inicio + 1
} else {
break
}
}
}
}
print(df_pensionados)
vector_suma <- colSums(df_pensionados)
vector_suma <- as.vector(vector_suma)[-length(as.vector(vector_suma))]
vector_años <- 65:115
print(vector_años)
df_proyeccion <- cbind(data.frame(Años = vector_años), df_pensionados)
return(df_proyeccion)
}
print(proyeccion_pensionados('M'))
df_sobrevi_65 <- function(df){
# Eliminar la columna 2023
df <- df[, -1]
# Selecciona la última fila del data.frame
fila <- df[nrow(df), ]
# Convierte la fila en un vector de valores sin nombres de columna ni índices
vec_sobre  <- unlist(fila, use.names = FALSE)
vec_edad <- 65:20
df_65 <- cbind(data.frame(Edad = vec_edad), data.frame(sobrevivientes = vec_sobre))
return(df_65)
}
df_sobrev_ho <- df_sobrevi_65(result_hombres_activos)
df_sobrev_mu <- df_sobrevi_65(result_mujeres_activos)
print(df_sobrev_ho)
print(df_sobrev_mu)
# función proyección
proyeccion_pensionados <- function(sexo) {
# Definir las tablas según el sexo ingresado
if (sexo == "M") {
df_empleados <- df_sobrev_ho
df_probas_muerte <- tabla_hombres
} else if (sexo == "F") {
df_empleados <- df_sobrev_mu
df_probas_muerte <- tabla_mujeres
} else {
return("Por favor ingresar 'M' para hombres y 'F' para mujeres")
}
# Crear un data frame lleno de ceros con 95 columnas y 51 filas
df_pensionados <- data.frame(matrix(0, ncol = 95, nrow = 51))
colnames(df_pensionados) <- as.character(2024:2118) # Asignar nombres a las columnas
rownames(df_pensionados) <- as.character(65:115) # Asignar nombres a las filas
# Procesar cada fila de empleados
for (fila in 1:nrow(df_empleados)) {
edad_actual <- df_empleados[fila, 1]
vivos <- df_empleados[fila, 2]
if (edad_actual >= 65) {
año_inicio <- 2024
edad_inicio <- edad_actual
for (año in año_inicio:2118) {
if (edad_inicio <= 115) {
#obtener las probas de muertes
proba_muerte <- df_probas_muerte[edad_inicio - 65 + 1, año - 2000 + 1]
df_pensionados[as.character(edad_inicio), as.character(año)] <- vivos
vivos <- vivos * (1 - proba_muerte)
edad_inicio <- edad_inicio + 1
} else {
break
}
}
}
}
print(df_pensionados)
vector_suma <- colSums(df_pensionados)
vector_suma <- as.vector(vector_suma)[-length(as.vector(vector_suma))]
vector_años <- 65:115
print(vector_años)
df_proyeccion <- cbind(data.frame(Años = vector_años), df_pensionados)
return(df_proyeccion)
}
print(proyeccion_pensionados('M'))
# funcion proyeccion
proyeccion_pensionados <- function(sexo) {
# Definir mis tablas según el sexo ingresado
if (sexo == "M") {
df_empleados <- df_sobrev_ho
df_probas_muerte <- tabla_hombres
} else if (sexo == "F") {
df_empleados <- df_sobrev_mu
df_probas_muerte <- tabla_mujeres
} else {
return("Por favor ingresar 'M' para hombres y 'F' para mujeres")
}
# Crear un data frame lleno de ceros con 95 columnas y el mismo número de filas que df_empleados
df_pensionados <- data.frame(matrix(0, ncol = 95, nrow = nrow(df_empleados)))
colnames(df_pensionados) <- as.character(2024:2118) # Asignar nombres a las columnas
for (fila in 1:nrow(df_empleados)) {
le_faltan <- as.integer(65 - df_empleados[fila, 1])
vivos <- df_empleados[fila, 2]
contador <- 0
for (i in le_faltan:(le_faltan + 51)) {
if ((66 + contador) <= nrow(df_probas_muerte) && (25 + i) <= ncol(df_probas_muerte)) {
proba_muerte <- df_probas_muerte[66 + contador, 25 + i]
df_pensionados[fila, le_faltan + contador + 1] <- vivos * (1 - proba_muerte)
# Actualizar cantidades
vivos <- vivos * (1 - proba_muerte)
contador <- contador + 1
}
}
}
#quitar ultima columna '2068.1' que ni idea de donde sale
df_pensionados <- df_pensionados[,-ncol(df_pensionados)]
#print(df_pensionados)
#vector_suma <- colSums(df_pensionados)
#vector_suma <- as.vector(vector_suma)[-length(as.vector(vector_suma))]
vector_años <- 65:20
df_proyeccion <- cbind( data.frame(Años = vector_años), df_pensionados)
#print(df_proyeccion)
#view(df_muertes)
return(df_proyeccion)
}
#print(proyeccion_pensionados('M'))
# Ver el resultados
proyeccion_poblacion_pensionados_ho <- proyeccion_pensionados('M')
proyeccion_poblacion_pensionados_mu <- proyeccion_pensionados('F')
print(proyeccion_poblacion_pensionados_ho)
print(proyeccion_poblacion_pensionados_mu)
df_sobrevi_65 <- function(df){
# Eliminar la columna 2023
df <- df[, -1]
# Selecciona la última fila del data.frame
fila <- df[nrow(df), ]
# Convierte la fila en un vector de valores sin nombres de columna ni índices
vec_sobre  <- unlist(fila, use.names = FALSE)
vec_edad <- 65:20
df_65 <- cbind(data.frame(Edad = vec_edad), data.frame(sobrevivientes = vec_sobre))
return(df_65)
}
df_sobrev_ho <- df_sobrevi_65(result_hombres_activos)
df_sobrev_mu <- df_sobrevi_65(result_mujeres_activos)
print(df_sobrev_ho)
print(df_sobrev_mu)
# funcion proyeccion
proyeccion_pensionados <- function(sexo) {
# Definir mis tablas según el sexo ingresado
if (sexo == "M") {
df_empleados <- df_sobrev_ho
df_probas_muerte <- tabla_hombres
} else if (sexo == "F") {
df_empleados <- df_sobrev_mu
df_probas_muerte <- tabla_mujeres
} else {
return("Por favor ingresar 'M' para hombres y 'F' para mujeres")
}
# Crear un data frame lleno de ceros con 95 columnas y el mismo número de filas que df_empleados
df_pensionados <- data.frame(matrix(0, ncol = 95, nrow = nrow(df_empleados)))
colnames(df_pensionados) <- as.character(2024:2118) # Asignar nombres a las columnas
for (fila in 1:nrow(df_empleados)) {
le_faltan <- as.integer(65 - df_empleados[fila, 1])
vivos <- df_empleados[fila, 2]
contador <- 0
for (i in le_faltan:(le_faltan + 51)) {
if ((66 + contador) <= nrow(df_probas_muerte) && (25 + i) <= ncol(df_probas_muerte)) {
proba_muerte <- df_probas_muerte[66 + contador, 25 + i]
df_pensionados[fila, le_faltan + contador + 1] <- vivos * (1 - proba_muerte)
# Actualizar cantidades
vivos <- vivos * (1 - proba_muerte)
contador <- contador + 1
}
}
}
#quitar ultima columna '2068.1' que ni idea de donde sale
df_pensionados <- df_pensionados[,-ncol(df_pensionados)]
#print(df_pensionados)
#vector_suma <- colSums(df_pensionados)
#vector_suma <- as.vector(vector_suma)[-length(as.vector(vector_suma))]
vector_años <- 65:20
df_proyeccion <- cbind( data.frame(Años = vector_años), df_pensionados)
#print(df_proyeccion)
#view(df_muertes)
return(df_proyeccion)
}
#print(proyeccion_pensionados('M'))
# Ver el resultados
proyeccion_poblacion_pensionados_ho <- proyeccion_pensionados('M')
proyeccion_poblacion_pensionados_mu <- proyeccion_pensionados('F')
print(proyeccion_poblacion_pensionados_ho)
print(proyeccion_poblacion_pensionados_mu)
# funcion proyeccion
proyeccion_pensionados <- function(sexo) {
# Definir mis tablas según el sexo ingresado
if (sexo == "M") {
df_empleados <- df_sobrev_ho
df_probas_muerte <- tabla_hombres
} else if (sexo == "F") {
df_empleados <- df_sobrev_mu
df_probas_muerte <- tabla_mujeres
} else {
return("Por favor ingresar 'M' para hombres y 'F' para mujeres")
}
# Crear un data frame lleno de ceros con 95 columnas y el mismo número de filas que df_empleados
df_pensionados <- data.frame(matrix(0, ncol = 96, nrow = nrow(df_empleados)))
colnames(df_pensionados) <- as.character(2024:2119) # Asignar nombres a las columnas
for (fila in 1:nrow(df_empleados)) {
le_faltan <- as.integer(65 - df_empleados[fila, 1])
vivos <- df_empleados[fila, 2]
contador <- 0
for (i in le_faltan:(le_faltan + 51)) {
proba_muerte <- df_probas_muerte[66 + contador, 25 + i]
df_pensionados[fila, le_faltan + contador + 1] <- vivos * (1 - proba_muerte)
# Actualizar cantidades
vivos <- vivos * (1 - proba_muerte)
contador <- contador + 1
}
}
#quitar ultima columna '2068.1' que ni idea de donde sale
df_pensionados <- df_pensionados[,-ncol(df_pensionados)]
#print(df_pensionados)
#vector_suma <- colSums(df_pensionados)
#vector_suma <- as.vector(vector_suma)[-length(as.vector(vector_suma))]
vector_años <- 65:20
df_proyeccion <- cbind( data.frame(Años = vector_años), df_pensionados)
#print(df_proyeccion)
#view(df_muertes)
return(df_proyeccion)
}
#print(proyeccion_pensionados('M'))
# Ver el resultados
proyeccion_poblacion_pensionados_ho <- proyeccion_pensionados('M')
proyeccion_poblacion_pensionados_mu <- proyeccion_pensionados('F')
print(proyeccion_poblacion_pensionados_ho)
print(proyeccion_poblacion_pensionados_mu)
# funcion proyeccion
proyeccion_pensionados <- function(sexo) {
# Definir mis tablas según el sexo ingresado
if (sexo == "M") {
df_empleados <- df_sobrev_ho
df_probas_muerte <- tabla_hombres
} else if (sexo == "F") {
df_empleados <- df_sobrev_mu
df_probas_muerte <- tabla_mujeres
} else {
return("Por favor ingresar 'M' para hombres y 'F' para mujeres")
}
# Crear un data frame lleno de ceros con 95 columnas y el mismo número de filas que df_empleados
df_pensionados <- data.frame(matrix(0, ncol = 96, nrow = nrow(df_empleados)))
colnames(df_pensionados) <- as.character(2024:2119) # Asignar nombres a las columnas
for (fila in 1:nrow(df_empleados)) {
le_faltan <- as.integer(65 - df_empleados[fila, 1])
vivos <- df_empleados[fila, 2]
contador <- 0
for (i in le_faltan:(le_faltan + 50)) {
proba_muerte <- df_probas_muerte[66 + contador, 25 + i]
df_pensionados[fila, le_faltan + contador + 1] <- vivos * (1 - proba_muerte)
# Actualizar cantidades
vivos <- vivos * (1 - proba_muerte)
contador <- contador + 1
}
}
#quitar ultima columna '2068.1' que ni idea de donde sale
df_pensionados <- df_pensionados[,-ncol(df_pensionados)]
#print(df_pensionados)
#vector_suma <- colSums(df_pensionados)
#vector_suma <- as.vector(vector_suma)[-length(as.vector(vector_suma))]
vector_años <- 65:20
df_proyeccion <- cbind( data.frame(Años = vector_años), df_pensionados)
#print(df_proyeccion)
#view(df_muertes)
return(df_proyeccion)
}
#print(proyeccion_pensionados('M'))
# Ver el resultados
proyeccion_poblacion_pensionados_ho <- proyeccion_pensionados('M')
proyeccion_poblacion_pensionados_mu <- proyeccion_pensionados('F')
print(proyeccion_poblacion_pensionados_ho)
print(proyeccion_poblacion_pensionados_mu)
# Función que calcula los beneficios que se pagan por muerte a los activos
beneficios_muertes_pensionados<- function(df_muertes){
inflacion <- 0.03
beneficio <- 1000000
for (i in 3:97) {
if(i != 1){
df_muertes[,i] <- df_muertes[,i] * (beneficio * (1 + inflacion**(i-1)))
}
else{
df_muertes[,i] <- df_muertes[,i] * beneficio
}
}
return(df_muertes)
}
beneficios_muerte_pensionados_ho <- beneficios_muertes_pensionados(mortalidad_hombres_pensionados)
beneficios_muerte_pensionados_mu <- beneficios_muertes_pensionados(mortalidad_mujeres_pensionados)
print(beneficios_muerte_pensionados_ho)
print(beneficios_muerte_pensionados_mu)
# Función que calcula los beneficios que se pagan por muerte a los activos
funcion_pago_anualidades <- function(df_pensionados_vivos){
inflacion <- 0.03
beneficio <- 300000 * 13 #12 meses y el aguinaldo
for (i in 3:97) {
if(i != 1){
df_muertes[,i] <- df_muertes[,i] * (beneficio * (1 + inflacion**(i-1)))
}
else{
df_muertes[,i] <- df_muertes[,i] * beneficio
}
}
return(df_muertes)
}
pepe <- funcion_pago_anualidades(proyeccion_poblacion_pensionados_ho)
# Función que calcula los beneficios que se pagan por muerte a los activos
funcion_pago_anualidades <- function(df_pensionados_vivos){
inflacion <- 0.03
beneficio <- 300000 * 13 #12 meses y el aguinaldo
for (i in 3:97) {
if(i != 1){
df_pensionados_vivos[,i] <- df_pensionados_vivos[,i] * (beneficio * (1 + inflacion**(i-1)))
}
else{
df_pensionados_vivos[,i] <- df_pensionados_vivos[,i] * beneficio
}
}
return(df_pensionados_vivos)
}
pepe <- funcion_pago_anualidades(proyeccion_poblacion_pensionados_ho)
# Función que calcula los beneficios que se pagan por muerte a los activos
funcion_pago_anualidades <- function(df_pensionados_vivos){
inflacion <- 0.03
beneficio <- 300000 * 13 #12 meses y el aguinaldo
for (i in 3:90) {
if(i != 1){
df_pensionados_vivos[,i] <- df_pensionados_vivos[,i] * (beneficio * (1 + inflacion**(i-1)))
}
else{
df_pensionados_vivos[,i] <- df_pensionados_vivos[,i] * beneficio
}
}
return(df_pensionados_vivos)
}
pepe <- funcion_pago_anualidades(proyeccion_poblacion_pensionados_ho)
proyeccion_pagos_anualidades_ho <- funcion_pago_anualidades(proyeccion_poblacion_pensionados_ho)
proyeccion_pagos_anualidades_mu <- funcion_pago_anualidades(proyeccion_poblacion_pensionados_mu)
print(proyeccion_pagos_anualidades_ho)
print(proyeccion_pagos_anualidades_mu)
# Ver el resultados
proyeccion_poblacion_pensionados_ho <- proyeccion_pensionados('M')
proyeccion_poblacion_pensionados_mu <- proyeccion_pensionados('F')
print(proyeccion_poblacion_pensionados_ho)
print(proyeccion_poblacion_pensionados_mu)
# funcion proyeccion
proyeccion_pensionados <- function(sexo) {
# Definir mis tablas según el sexo ingresado
if (sexo == "M") {
df_empleados <- df_sobrev_ho
df_probas_muerte <- tabla_hombres
} else if (sexo == "F") {
df_empleados <- df_sobrev_mu
df_probas_muerte <- tabla_mujeres
} else {
return("Por favor ingresar 'M' para hombres y 'F' para mujeres")
}
# Crear un data frame lleno de ceros con 95 columnas y el mismo número de filas que df_empleados
df_pensionados <- data.frame(matrix(0, ncol = 96, nrow = nrow(df_empleados)))
colnames(df_pensionados) <- as.character(2024:2119) # Asignar nombres a las columnas
for (fila in 1:nrow(df_empleados)) {
le_faltan <- as.integer(65 - df_empleados[fila, 1])
vivos <- df_empleados[fila, 2]
contador <- 0
for (i in le_faltan:(le_faltan + 50)) {
proba_muerte <- df_probas_muerte[66 + contador, 25 + i]
df_pensionados[fila, le_faltan + contador + 1] <- vivos * (1 - proba_muerte)
# Actualizar cantidades
vivos <- vivos * (1 - proba_muerte)
contador <- contador + 1
}
}
#quitar ultima columna '2068.1' que ni idea de donde sale
df_pensionados <- df_pensionados[,-ncol(df_pensionados)]
#print(df_pensionados)
#vector_suma <- colSums(df_pensionados)
#vector_suma <- as.vector(vector_suma)[-length(as.vector(vector_suma))]
vector_años <- 65:20
df_proyeccion <- cbind( data.frame(Años = vector_años), df_pensionados)
#print(df_proyeccion)
#view(df_muertes)
return(df_proyeccion)
}
#print(proyeccion_pensionados('M'))
# Ver el resultados
proyeccion_poblacion_pensionados_ho <- proyeccion_pensionados('M')
proyeccion_poblacion_pensionados_mu <- proyeccion_pensionados('F')
print(proyeccion_poblacion_pensionados_ho)
print(proyeccion_poblacion_pensionados_mu)
# funcion proyeccion
proyeccion_pensionados <- function(sexo) {
# Definir mis tablas según el sexo ingresado
if (sexo == "M") {
df_empleados <- df_sobrev_ho
df_probas_muerte <- tabla_hombres
} else if (sexo == "F") {
df_empleados <- df_sobrev_mu
df_probas_muerte <- tabla_mujeres
} else {
return("Por favor ingresar 'M' para hombres y 'F' para mujeres")
}
# Crear un data frame lleno de ceros con 95 columnas y el mismo número de filas que df_empleados
df_pensionados <- data.frame(matrix(0, ncol = 96, nrow = nrow(df_empleados)))
colnames(df_pensionados) <- as.character(2024:2119) # Asignar nombres a las columnas
for (fila in 1:nrow(df_empleados)) {
le_faltan <- as.integer(65 - df_empleados[fila, 1])
vivos <- df_empleados[fila, 2]
contador <- 0
for (i in le_faltan:(le_faltan + 50)) {
proba_muerte <- df_probas_muerte[66 + contador, 25 + i]
df_pensionados[fila, le_faltan + contador + 1] <- vivos * (1 - proba_muerte)
# Actualizar cantidades
vivos <- vivos * (1 - proba_muerte)
contador <- contador + 1
}
}
vector_años <- 65:20
df_proyeccion <- cbind( data.frame(Años = vector_años), df_pensionados)
#print(df_proyeccion)
#view(df_muertes)
return(df_proyeccion)
}
#print(proyeccion_pensionados('M'))
# Función que calcula los beneficios que se pagan por muerte a los activos
funcion_pago_anualidades <- function(df_pensionados_vivos){
inflacion <- 0.03
beneficio <- 300000 * 13 #12 meses y el aguinaldo
for (i in 3:97) {
if(i != 1){
df_pensionados_vivos[,i] <- df_pensionados_vivos[,i] * (beneficio * (1 + inflacion**(i-1)))
}
else{
df_pensionados_vivos[,i] <- df_pensionados_vivos[,i] * beneficio
}
}
return(df_pensionados_vivos)
}
pepe <- funcion_pago_anualidades(proyeccion_poblacion_pensionados_ho)
# Ver el resultados
proyeccion_poblacion_pensionados_ho <- proyeccion_pensionados('M')
proyeccion_poblacion_pensionados_mu <- proyeccion_pensionados('F')
print(proyeccion_poblacion_pensionados_ho)
print(proyeccion_poblacion_pensionados_mu)
# Función que calcula los beneficios que se pagan por muerte a los activos
funcion_pago_anualidades <- function(df_pensionados_vivos){
inflacion <- 0.03
beneficio <- 300000 * 13 #12 meses y el aguinaldo
for (i in 3:97) {
if(i != 1){
df_pensionados_vivos[,i] <- df_pensionados_vivos[,i] * (beneficio * (1 + inflacion**(i-1)))
}
else{
df_pensionados_vivos[,i] <- df_pensionados_vivos[,i] * beneficio
}
}
return(df_pensionados_vivos)
}
pepe <- funcion_pago_anualidades(proyeccion_poblacion_pensionados_ho)
proyeccion_pagos_anualidades_ho <- funcion_pago_anualidades(proyeccion_poblacion_pensionados_ho)
proyeccion_pagos_anualidades_mu <- funcion_pago_anualidades(proyeccion_poblacion_pensionados_mu)
print(proyeccion_pagos_anualidades_ho)
print(proyeccion_pagos_anualidades_mu)
